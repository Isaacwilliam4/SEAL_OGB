Results will be saved in results/world_trade_1995_20240724122305
Command line input: python seal_link_pred.py --dataset world_trade_1995 --fast_split --num_hops 1 --use_feature --eval_steps 1 --runs 3 --epochs 10 --dynamic_train --dynamic_val --dynamic_test --train_percent 2 --val_percent 1 --test_percent 1 --use_dl
 is saved.
Data found, skipping download...
Path /grphome/grp_supplychainai/nobackup/archive/world_trade_seal_h1_drnl_rph10
Total number of parameters is 80578
SortPooling k is set to 29
  0%|                                           | 0/1 [00:00<?, ?it/s]  0%|                                           | 0/1 [00:01<?, ?it/s]
dl torch.Size([826])
dl type <class 'torch.Tensor'>
dldtype torch.int64
dl device cuda:0
x device cuda:0
Tensor Z shape: torch.Size([826])
Tensor Z_emb shape: torch.Size([826, 32])
Tensor dl shape: torch.Size([826])
z content tensor([1, 1, 4, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 1, 1, 3,
        3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 4, 2, 2, 2, 2, 2, 3, 2, 2, 0, 2,
        2, 2, 2, 2, 0, 2, 2, 2, 0, 3, 2, 2, 2, 3, 3, 3, 2, 2, 0, 2, 2, 2, 2, 3,
        2, 3, 2, 2, 0, 1, 1, 3, 2, 2, 2, 2, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 4,
        3, 3, 2, 2, 2, 3, 3, 2, 3, 1, 1, 2, 3, 4, 3, 3, 2, 3, 4, 2, 3, 3, 3, 3,
        2, 3, 3, 2, 2, 0, 2, 2, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        2, 4, 3, 4, 3, 3, 3, 2, 3, 0, 3, 2, 4, 2, 3, 3, 3, 0, 3, 3, 3, 2, 2, 3,
        3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 4, 3, 3, 3, 3, 2, 0, 2, 2, 2, 2,
        3, 3, 2, 3, 1, 1, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 2,
        3, 3, 3, 3, 2, 2, 2, 2, 3, 0, 3, 3, 3, 2, 3, 3, 3, 3, 2, 0, 2, 3, 3, 2,
        3, 3, 4, 3, 3, 1, 1, 0, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3,
        3, 3, 3, 4, 2, 3, 3, 3, 3, 3, 2, 3, 4, 3, 1, 1, 3, 3, 3, 2, 2, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3,
        3, 2, 3, 3, 3, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 4, 4, 3, 0, 3, 4, 3,
        3, 3, 3, 3, 3, 4, 3, 3, 1, 1, 4, 3, 2, 3, 3, 4, 3, 4, 3, 3, 3, 3, 3, 4,
        3, 1, 1, 3, 3, 2, 4, 3, 0, 0, 2, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 3, 4, 3, 3, 3, 4, 4, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 4,
        4, 4, 3, 4, 4, 3, 3, 4, 3, 4, 3, 3, 3, 3, 3, 4, 3, 4, 3, 3, 6, 4, 4, 3,
        2, 3, 4, 4, 4, 1, 1, 0, 0, 1, 1, 4, 3, 4, 4, 3, 2, 3, 3, 3, 3, 4, 3, 3,
        4, 3, 3, 0, 3, 3, 0, 3, 3, 3, 2, 4, 3, 3, 4, 3, 3, 2, 3, 3, 3, 3, 3, 3,
        4, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 4, 4, 2, 3, 3, 3, 0, 3, 4, 3, 3, 3, 3,
        3, 2, 3, 3, 4, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 0, 3, 3, 2, 2, 3, 4, 3,
        1, 1, 4, 3, 4, 4, 3, 3, 4, 3, 4, 3, 4, 4, 4, 4, 3, 0, 4, 4, 0, 4, 1, 1,
        3, 4, 3, 0, 3, 3, 0, 0, 3, 0, 4, 2, 3, 3, 3, 4, 3, 0, 4, 3, 0, 3, 3, 2,
        0, 3, 3, 4, 3, 3, 2, 0, 4, 4, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 3, 3, 4, 2, 2, 3, 3, 0, 3, 0, 3, 3, 3,
        2, 3, 2, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 1, 3, 2, 3, 2,
        2, 3, 0, 2, 3, 2, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3,
        3, 4, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 0, 3, 2, 4, 1, 1, 0, 0, 0, 0, 0,
        1, 1, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4,
        4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 3, 4, 4, 3, 6, 4, 4, 4, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 0, 0, 0, 1, 1, 0, 0, 2], device='cuda:0')
dl content tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  1,  1,  0,  1,  0, -1,  0,  0,  0,  0,  0,  1,  0,
         0,  0,  0,  1,  0,  0, -1, -1,  0,  0,  0,  0,  0, -1,  0,  0,  0, -1,
         0, -1,  0,  0, -1, -2,  0,  0,  1,  0, -1,  0,  0,  0,  0, -1, -1, -1,
         0,  0,  0,  0,  0,  0,  0, -1,  0, -1,  0,  0, -2,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0, -1,
         0,  0,  0,  0,  0,  0,  2,  0,  1,  1, -1, -1,  0,  1, -1,  1,  0, -1,
        -1,  3,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0,  1,  1, -1,
        -2,  1,  0, -1, -2,  0,  0,  0,  1,  0,  1,  1, -1,  0,  0,  0,  2,  0,
         0,  0, -1, -1,  1,  0,  0, -2,  0, -2, -1,  0,  1,  0,  0,  0,  0, -1,
         2,  1,  1, -2, -1,  1,  1,  0,  0, -1,  1,  1,  1,  0,  0, -1,  1, -1,
         0,  0,  0,  1,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  1,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0, -2,  0,  1,  0,  0,  0, -1,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, -1, -1,  0,  0, -2,  0,  0,
         0,  0,  0,  0,  0, -3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,
         0, -1,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0, -2,  0, -1, -1,  0, -1,
         0, -1,  0,  0,  0,  0,  0, -2, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0, -2,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, -1,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,
        -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        -1, -2,  0, -1,  0,  1,  0,  0, -1,  0,  0, -1, -2, -3,  0,  0, -1,  0,
        -2, -1,  0, -1, -1,  0,  0,  0, -1,  1,  0,  0,  0, -1, -1, -2,  0,  0,
        -1,  0,  0, -3, -2,  0,  0, -2, -1,  0,  0, -1, -2,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       device='cuda:0')
dl_emb device cuda:0
Z torch.Size([826, 32])
Z type <class 'torch.Tensor'>
zdtype torch.float32
dl_emb torch.Size([826, 32])
dl_emb type <class 'torch.Tensor'>
d_emb type torch.float32
x torch.Size([826, 32])
x type <class 'torch.Tensor'>
xdtype torch.float32
x shape: torch.Size([826, 64])
edge_index shape: torch.Size([2, 6008])
edge_weight shape: None
Traceback (most recent call last):
  File "seal_link_pred.py", line 1319, in <module>
    loss = train()
  File "seal_link_pred.py", line 511, in train
    logits = model(data.z, data.edge_index, data.batch, dl, x, edge_weight, node_id)
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/grphome/grp_supplychainai/SEAL_OGB/models.py", line 249, in forward
    xs += [torch.tanh(conv(xs[-1], edge_index, edge_weight))]
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch_geometric/nn/conv/gcn_conv.py", line 260, in forward
    x = self.lin(x)
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
  File "/grphome/grp_supplychainai/.conda/envs/sealenv/lib/python3.8/site-packages/torch_geometric/nn/dense/linear.py", line 147, in forward
    return F.linear(x, self.weight, self.bias)
RuntimeError: mat1 and mat2 shapes cannot be multiplied (826x64 and 32x32)
